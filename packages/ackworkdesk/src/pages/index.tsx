// packages/ackworkdesk/src/pages/index.tsx
import { useMemo, useState } from 'react'
import { DataTable } from 'react-components-lib.eaa'
import type { ColumnSetting, HeaderRightElement } from 'react-components-lib.eaa'
import moduleConfig from '../module.config.json'
import { apiGet, MainPageContainer, MAIN_PAGE_TABLE_HEIGHT } from '@app/common'

/* ---------------------- export util (CSV/XLSX) ---------------------- */
export type ExportColumn = { column: string; title: string }
type ExportOpts = { fileName?: string; format?: 'xlsx' | 'csv'; sheetName?: string }

export async function exportRows(
  rows: any[],
  columns: ExportColumn[],
  opts: ExportOpts = {}
): Promise<void> {
  const fileName = (opts.fileName || 'export').trim() || 'export'
  const format = opts.format || 'xlsx'
  const sheetName = opts.sheetName || 'Data'

  const header = columns.map((c) => c.title)
  const body = (Array.isArray(rows) ? rows : []).map((r) =>
    columns.map((c) => {
      const v = (r as any)?.[c.column]
      if (Array.isArray(v)) return v.map((x) => (x == null ? '' : String(x))).join(',')
      if (v == null) return ''
      return v instanceof Date ? v.toISOString() : v
    })
  )
  const aoa: any[][] = [header, ...body]

  const safeBase = fileName.replace(/\.(xlsx|csv)$/i, '')
  const dl = (blob: Blob, ext: 'xlsx' | 'csv') => {
    const a = document.createElement('a')
    const url = URL.createObjectURL(blob)
    a.href = url
    a.download = `${safeBase}.${ext}`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  if (format === 'csv') {
    const esc = (val: any) => {
      const s = val == null ? '' : String(val)
      return /[",\n]/.test(s) ? `"${s.replace(/"/g, '""')}"` : s
    }
    const csv = aoa.map((row) => row.map(esc).join(',')).join('\n')
    dl(new Blob([csv], { type: 'text/csv;charset=utf-8' }), 'csv')
    return
  }

  const getExcelJS = async () => {
    try {
      const mod = await import(/* @vite-ignore */ 'exceljs')
      return (mod as any).default ?? (mod as any)
    } catch {
      const g = (window as any)?.ExcelJS
      if (g) return g
      throw new Error('ExcelJS not found.')
    }
  }
  const ExcelJS = await getExcelJS()
  const wb = new ExcelJS.Workbook()
  const ws = wb.addWorksheet(sheetName)
  ws.addRows(aoa)
  const buf: ArrayBuffer = await wb.xlsx.writeBuffer()
  dl(
    new Blob([buf], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' }),
    'xlsx'
  )
}
/* -------------------------------------------------------------------- */

type Row = {
  id: number
  arn: string
  bookingLocation: string
  workflowStage: string
  submissionMode: string
  receivedAt: string
  generatedBy: string
  __receivedAtMs: number
}

export default function AcknowledgmentWorkDesk() {
  const [status, setStatus] = useState<'PENDING' | 'REGISTERED' | 'ALL'>('PENDING')

  const statusOptions = [
    { text: 'Pending Registration', value: 'PENDING' },
    { text: 'Registered', value: 'REGISTERED' },
    { text: 'All', value: 'ALL' }
  ]

  const columns: ColumnSetting[] = useMemo(
    () => [
      { column: 'arn', title: 'ARN #', filter: { type: 'text' } },
      { column: 'bookingLocation', title: 'BOOKING LOCATION' },
      { column: 'workflowStage', title: 'WORKFLOW STAGE' },
      { column: 'submissionMode', title: 'SUBMISSION MODE' },
      { column: 'receivedAt', title: 'RECEIVED DATE AND TIME' },
      { column: 'generatedBy', title: 'GENERATED BY' }
    ],
    []
  )

  const server = useMemo(
    () => ({
      debounceMs: 250,
      fetcher: async ({ pageIndex, pageSize, sorting, columnFilters, globalFilter }: any) => {
        const sortBy = sorting?.[0]?.id ?? ''
        const order = sorting?.[0]?.desc ? 'desc' : 'asc'

        const params: any = {
          limit: pageSize,
          skip: pageIndex * pageSize,
          q: globalFilter ?? '',
          sortBy,
          order,
          filters: JSON.stringify(columnFilters ?? []),
          status
        }

        // Hierarchical key for easy invalidation: ['workdesk', <module>, 'ack', <params>]
        const key = [
          'workdesk',
          moduleConfig.moduleName,
          'ack',
          { pageIndex, pageSize, sortBy, order, columnFilters, q: globalFilter ?? '', status }
        ] as const

        const data = await apiGet<{ rows: Row[]; total: number }>({
          endpoint: '/workdesk/search',
          params,
          queryKey: key // âœ… enables caching via ensureQueryData
        })

        return data
      }
    }),
    [status]
  )

  const downloadControls = useMemo(
    () => ({
      fileName: 'ack_work_desk',
      format: 'xlsx' as const,
      showConfigSection: true,
      showBuiltinAll: false,
      showBuiltinSelected: false,
      extraMenuItems: [
        {
          key: 'server-all',
          icon: 'cloud_download',
          label: 'Download ALL from server',
          onClick: async ({ fileName, format }: { fileName: string; format: 'xlsx' | 'csv' }) => {
            const params: any = { limit: 0, skip: 0, status }
            // Non-cached one-off GET (omit queryKey)
            const data = await apiGet<{ rows: Row[]; total: number }>({
              endpoint: '/workdesk/search',
              params
            })
            await exportRows(data.rows, columns as unknown as ExportColumn[], { fileName, format })
          }
        }
      ]
    }),
    [status, columns]
  )

  const headerRightElements: HeaderRightElement[] = [
    {
      type: 'dropdown',
      width: 220,
      placeholder: 'Pending Registration',
      options: statusOptions,
      value: status,
      clearable: false,
      onChange: (v: string | string[] | null) =>
        setStatus((Array.isArray(v) ? (v[0] ?? '') : (v ?? '')) as any)
    },
    {
      type: 'button',
      text: 'Registration',
      color: 'success',
      icon: 'plus-circle',
      onClick: () => console.log('Registration')
    }
  ]

  return (
    <MainPageContainer title="Acknowledgment Work Desk">
      <DataTable
        enableGlobalFiltering
        columnSettings={columns}
        enableDownload
        downloadControls={downloadControls}
        serverMode
        server={server as any}
        pageSize={20}
        height={MAIN_PAGE_TABLE_HEIGHT}
        headerRightElements={headerRightElements}
      />
    </MainPageContainer>
  )
}
